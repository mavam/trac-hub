#!/usr/bin/env ruby

require 'json'
require 'logger'
require 'rest-client'
require 'optparse'
require 'sequel'
require 'yaml'
require 'set'
require 'singleton'
require 'uri'

class GracefulQuit
  include Singleton

  attr_accessor :breaker

  def initialize
    self.breaker = false
  end

  def self.enable
    trap('INT') {
      yield if block_given?
      self.instance.breaker = true
    }
  end

  def self.check(message = "Quitting")
    if self.instance.breaker
      yield if block_given?
      puts message
      exit
    end
  end

end

class Migrator
  def initialize(trac, github, users, labels, revmap, attachurl, singlepost, safetychecks)
    @trac = trac
    @repo = github['repo']
    @token = github["token"]

    @users = Hash[users]
    @labels = Hash[labels.map { |cat, rx| [cat, Hash[rx] ] }]
    @ticket_to_issue = {}
    @trac_mails_cache = Hash.new

    $logger.debug("Get highest in #{@repo}")
    issues = JSON.parse(RestClient.get(
        "https://api.github.com/repos/#{@repo}/issues",
        {params: {filter: "all", state: "all", sort: "created", direction: "desc"}}))
    @last_created_issue = issues.empty? ? 0 : issues[0]["number"].to_i

    $logger.info("Last created issue on GitHub is '#{@last_created_issue}'")

    @revmap = revmap
    @attachurl = attachurl
    @singlepost = singlepost
    @safetychecks = safetychecks
  end

  def migrate(start_ticket = -1)
    if start_ticket == -1
      start_ticket = @last_created_issue+1
    end
    GracefulQuit.enable
    migrate_tickets(start_ticket)
  end

  private

  # returns the author mail if found, otherwise author itself
  def trac_mail(author)
    return @trac_mails_cache[author] if @trac_mails_cache.has_key?(author)
    # tries to retrieve the email from trac db
    data = @trac.sessions.select(:value).where('name = "email" AND sid = ?', author)
    return (@trac_mails_cache[author] = data.first[:value]) if data.count == 1
    return (@trac_mails_cache[author] = author) # not found
  end

  # returns the git commit hash for a specified revision (using revmap hash)
  def map_changeset(str)
    if @revmap and @revmap.has_key?(str)
      return "[r#{str}](../commit/#{@revmap[str]})"
    else
      return str
    end
  end

  # Format time for github API
  def format_time(time)
    time = Time.at(time/1e6, time%1e6)
    return time.strftime("%FT%TZ")
  end

  # Creates github issues for trac tickets.
  def migrate_tickets(start_ticket)
    $logger.info('migrating issues')
    # We match the issue title to determine whether an issue exists already.
    @trac.tickets.order(:id).where{id >= start_ticket}.all.each do |ticket|
      GracefulQuit.check("quitting after processing ticket ##{@last_created_issue}")

      if @safetychecks; begin
        # issue exists already:
        issue = JSON.parse(RestClient.get(
            "https://api.github.com/repos/#{@repo}/issues/#{ticket[:id]}"))
        $logger.info("found ticket #{ticket[:id]}")
        next
      rescue
      end end

      begin
        $logger.info("creating issue #{ticket[:id]} (#{ticket[:reporter]})")

        # API details: https://gist.github.com/jonmagic/5282384165e0f86ef105
        request = compose_issue(ticket)
        response = JSON.parse(RestClient.post(
          "https://api.github.com/repos/#{@repo}/import/issues",
          request.to_json,
          {"Authorization" => "token #{@token}",
           "Content-Type" => "application/json",
           "Accept" => "application/vnd.github.golden-comet-preview+json"}))
      end

      if @safetychecks
        while response["status"] == "pending"
          sleep 0.1
          $logger.info("Checking import status: #{response['id']}")
          response = JSON.parse(RestClient.get(response['url'], {
            "Authorization" => "token #{@token}",
            "Accept" => "application/vnd.github.golden-comet-preview+json"}))
        end
        $logger.info("Status: #{response['status']}")
        issue_id = response["issue_url"].match(/\d+$/).to_s.to_i

        $logger.info("created issue ##{issue_id} for ticket #{ticket[:id]}")

        # assert correct issue number
        if issue_id != ticket[:id]
          $logger.info("mismatch issue ##{issue_id} for ticket #{ticket[:id]}")
          exit 1
        end
      else
        # to allow manual verification:
        $logger.info(response['url'])
      end
      @last_created_issue = ticket[:id]
    end
  end

  def compose_issue(ticket)

    body = ""
    body += "*Issue migrated from trac ticket # #{ticket[:id]}*\n\n"
    closed = nil

    # summary line:
    body += [:component, :priority, :resolution, :keywords].map{
        |cat| ticket[cat] and not ticket[cat].lstrip.empty? and
              "**#{cat.to_s}:** #{ticket[cat]}"
    }.select{|x| x}.join(" | ")

    # Initial report
    # TODO: respect ticket[:changetime]
    body += "\n\n" if not @singlepost
    desc = ticket_change(@singlepost, {
      ticket: ticket[:id],
      time: ticket[:time],
      author: ticket[:reporter],
      field: "comment",
      oldvalue: nil,
      newvalue: ticket[:description],
    })
    body += desc["body"] if desc

    # combine the changes and attachment table results and sort them by date
    changes = @trac.changes.where(:ticket => ticket[:id]).collect.to_a
    changes += @trac.attachments.where(:type => 'ticket', :id => ticket[:id]).collect.to_a
    changes = changes.sort_by{|x| x[:time]}

    # replay all changes in chronological order:
    comments = changes.map{|x| ticket_change(@singlepost, x)}.select{|x| x}.to_a
    if @singlepost
      body += comments.map{|x| x["body"]}.join("\n")
      comments = []
    end

    labels = Set[]
    changes.each do |x|
      del = @labels.fetch(x[:field], Hash[])[x[:oldvalue]]
      add = @labels.fetch(x[:field], Hash[])[x[:newvalue]]
      labels.delete(del) if del
      labels.add(add) if add
      if x[:field] == "status" and x[:newvalue] == "closed"
        closed = x[:time]
      end
    end

    issue = {
      "title" => ticket[:summary],
      "body" => body,
      "labels" => labels.to_a,
      "closed" => ticket[:status] == "closed",
      "created_at" => format_time(ticket[:time]),
    }

    if ticket[:changetime]
      issue["updated_at"] = format_time(ticket[:changetime])
    end
    if issue["closed"] and closed
      issue["closed_at"] = format_time(closed)
    end

    return {
      "issue" => issue,
      "comments" => comments,
    }
  end

  def ticket_change(append, meta)

    # kind
    if meta[:ticket]
      kind = meta[:field]
    else
      kind = 'attachment'
    end
    kind = 'title' if kind == 'summary'

    # time
    time = meta[:time]
    time = Time.at(time/1e6, time%1e6)

    # author
    author = meta[:author]
    author = trac_mail(author)
    if @users.has_key?(author)
      author = "@" + @users[author]
    end

    text = ""
    text += "\n___\n" if append
    text += "#### #{time.strftime("%Y-%m-%d %H:%M:%S")}: #{author} "

    case kind
      when 'owner', 'status', 'title', 'resolution', 'priority', 'component', 'type', 'severity', 'platform'
        old = meta[:oldvalue]
        new = meta[:newvalue]
        if old and new
          text += "changed #{kind} from *#{old}* to *#{new}*"
        elsif old
          text += "removed #{kind} (was *#{old}*)"
        elsif new
          text += "set #{kind} to *#{new}*"
        end

      when 'comment'
        body = meta[:newvalue]
        text += "commented\n\n"
        text += "\n___\n" if not append
        text += markdownify(body)
        return nil if body == nil or body.lstrip.empty?

      when 'attachment'
        text += "uploaded file "
        name = meta[:filename]
        body = meta[:description]
        if @attachurl
          url = URI.escape("#{@attachurl}/#{meta[:id]}/#{name}")
          text += "[`#{name}`](#{url})"
          if [".png", ".jpg", ".gif"].include? File.extname(name).downcase
            body += "\n![#{name}](#{url})"
          end
        else
          text += "`#{name}`"
        end
        text += " (#{(meta[:size]/1024.0).round(1)} KiB)"
        text += "\n\n" + body

      when 'description'
        # (ticket[:description] already contains the new value,
        # so there is no need to update)
        text += "edited the issue description"

      when 'keywords', 'cc', 'reporter', 'version'
        # don't care
        return nil
    end

    return {
      "body" => text,
      "created_at" => format_time(meta[:time]),
    }
  end

  def markdownify(str)
    # Line endings
    str.gsub!("\r\n", "\n")
    # CommitTicketReference
    str.gsub!(/\{\{\{\n(#!CommitTicketReference .+?)\}\}\}/m, '\1')
    str.gsub!(/#!CommitTicketReference .+\n/, '')
    # Code
    str.gsub!(/\{\{\{([^\n]+?)\}\}\}/, '`\1`')
    str.gsub!(/\{\{\{(.+?)\}\}\}/m, '```\1```')
    str.gsub!(/(?<=```)#!/m, '')
    # Headings
    str.gsub!(/\=\=\=\=\s(.+?)\s\=\=\=\=/, '#### \1')
    str.gsub!(/\=\=\=\s(.+?)\s\=\=\=/, '### \1')
    str.gsub!(/\=\=\s(.+?)\s\=\=/, '## \1')
    str.gsub!(/\=\s(.+?)\s\=[\s\n]*/, '# \1')
    # Links
    str.gsub!(/\[(http[^\s\[\]]+)\s([^\[\]]+)\]/, '[\2](\1)')
    str.gsub!(/\!(([A-Z][a-z0-9]+){2,})/, '\1')
    # Font styles
    str.gsub!(/'''(.+?)'''/, '**\1**')
    str.gsub!(/''(.+?)''/, '*\1*')
    str.gsub!(/[^:]\/\/(.+?[^:])\/\//, '_\1_')
    # Lists
    str.gsub!(/(^\s+)\*/, '\1-')
    str.gsub!(/(^\s+)(\d)\./, '\1\2.')
    # Changeset
    str.gsub!(/https?:\/\/svnweb.cern.ch\/trac\/madx\/changeset\/(\d+)\/?/, '[changeset:\1]')
    str.gsub!(/\[changeset:"r(\d+)".*\]/, '[changeset:\1]')
    str.gsub!(/\[changeset:r(\d+)\]/,     '[changeset:\1]')
    str.gsub!(/\[changeset:"(\d+)".*\]/) { map_changeset(Regexp.last_match[1]) }
    str.gsub!(/\[changeset:(\d+)\]/)     { map_changeset(Regexp.last_match[1]) }
    str.gsub!(/\br(\d+)\b/)              { map_changeset(Regexp.last_match[1]) }
    # Ticket
    str.gsub!(/ticket:(\d+)/, '#\1')
    return str
  end
end

class Trac
  attr_reader :tickets, :changes, :sessions, :attachments
  def initialize(db)
    $logger.info('loading tickets')
    @db = db
    @tickets = @db[:ticket]
    @changes = @db[:ticket_change]
    @sessions = @db[:session_attribute]
    @attachments = @db[:attachment]
  end
end

class Options < Hash
  def initialize(argv)
    super()
    opts = OptionParser.new do |opts|
      opts.banner = "#{$0}, available options:"
      opts.on('-c config', '--config', 'set the configuration file') do |c|
        self[:config] = c
      end
      opts.on_tail('-h', '--help', 'display this help and exit') do |help|
        puts(opts)
        exit
      end
      opts.on('-s', '--start-at ID', 'start migration from ticket with number <ID>') do |id|
        self[:start] = id
      end
      opts.on('-r', '--rev-map-file FILE',
              'allows to specify a commit revision mapping FILE') do |file|
        self[:revmapfile] = file
      end
      opts.on('-a', '--attachment-url URL',
              'if attachment files are reachable via a URL we reference this here') do |url|
        self[:attachurl] = url
      end
      opts.on('-S', '--single-post',
              'Put all issue comments in the first message.') do |single|
        self[:singlepost] = single
      end
      opts.on('-F', '--fast-import',
              'Import without safety-checking issue numbers.') do |fast|
        self[:fast] = fast
      end
      begin
        opts.parse!(argv)
        if not self[:config]
          default = File.join(File.dirname(__FILE__), 'config.yaml')
          raise 'missing configuration file' unless File.exists?(default)
          self[:config] = default
        end
        self[:start] = -1 unless self[:start]
      rescue => e
        STDERR.puts(e)
        STDERR.puts('run with -h to see available options')
        exit 1
      end
    end
  end
end

if __FILE__ == $0
  opts = Options.new(ARGV)
  cfg = YAML.load_file(opts[:config])

  # Setup logger.
  $logger = Logger.new(STDERR)
  $logger.level = opts[:verbose] ? Logger::DEBUG : Logger::INFO
  $logger.formatter = proc do |severity, datetime, progname, msg|
    time = datetime.strftime('%Y-%m-%d %H:%M:%S')
    "[#{time}] #{severity}#{' ' * (5 - severity.size + 1)}| #{msg}\n"
  end

  # Setup database.
  db = nil
  if db_url = cfg['trac']['database']
    db = Sequel.connect(db_url)
  end
  if not db
    $logger.error('could not connect to trac databse')
    exit 1
  end

  # load revision mapping file and convert it to a hash.
  # This revmap file allows to map between SVN revisions (rXXXX)
  # and git commit sha1 hashes.
  revmap = nil
  if opts[:revmapfile]
    File.open(opts[:revmapfile], "r") do |f|
      $logger.info(opts[:revmapfile])
      revmap = Hash[f.lines
        .map {|line|    line.split(/\s+/)}
        .map {|rev,sha| [rev.gsub(/^r/, ''), sha]}  # remove leading "r" if present
      ]
    end
  end

  trac = Trac.new(db)
  migrator = Migrator.new(
      trac, cfg['github'], cfg['users'], cfg['labels'], revmap,
      opts[:attachurl], opts[:singlepost], (not opts[:fast]))
  migrator.migrate(opts[:start])
end
