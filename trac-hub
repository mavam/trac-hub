#!/usr/bin/env ruby

require 'json'
require 'logger'
require 'rest-client'
require 'optparse'
require 'sequel'
require 'yaml'
require 'set'
require 'singleton'
require 'uri'
require 'pry'

class GracefulQuit
  include Singleton

  attr_accessor :breaker

  def initialize
    self.breaker = false
  end

  def self.enable
    trap('INT') {
      yield if block_given?
      self.instance.breaker = true
    }
  end

  def self.check(message = "Quitting")
    if self.instance.breaker
      yield if block_given?
      $log.info message
      exit
    end
  end

end

class Migrator
  def initialize(args)
    #def initialize(trac, github, users, labels, revmap, attachurl, singlepost, safetychecks, mockdeleted = false)
    trac              = args[:trac]
    github            = args[:cfg]['github']
    users             = args[:cfg]['users']
    labels            = args[:cfg]['labels']
    milestones        = args[:cfg]['milestones']
    revmap            = args[:revmap]
    attachurl         = args[:opts][:attachurl] || args[:cfg].dig("attachments", "url")
    singlepost        = args[:opts][:singlepost]
    safetychecks      = (not args[:opts][:fast])
    mockdeleted       = args[:opts][:mockdeleted]
    tracticketbaseurl = args[:cfg]['trac']['ticketbaseurl']

    @trac  = trac
    @repo  = github['repo']
    @token = github["token"]

    @milestonesfromtrac = milestones

    @users = Hash[users]

    @labels_cfg        = Hash[labels.map { |cat, rx| [cat, Hash[rx]] }]
    @ticket_to_issue   = {}
    @trac_mails_cache  = Hash.new
    @mockdeleted       = mockdeleted
    @tracticketbaseurl = tracticketbaseurl

    $logger.debug("Get highest in #{@repo}")
    issues              = JSON.parse(RestClient.get(
        "https://api.github.com/repos/#{@repo}/issues",
        {"Authorization" => "token #{@token}",
         params:         {
             filter:    "all",
             state:     "all",
             sort:      "created",
             direction: "desc",
         }}
    ))
    @last_created_issue = issues.empty? ? 0 : issues[0]["number"].to_i

    $logger.info("created issue on GitHub is '#{@last_created_issue}' #{issues.count}")


    load_milestone_map

    load_subtickets

    @revmap       = revmap
    @attachurl    = attachurl
    @singlepost   = singlepost
    @safetychecks = safetychecks
  end

  def load_subtickets
    @subtickets    = @trac.subtickets.all.group_by { |i| i[:parent] }
    @parenttickets = @trac.subtickets.all.group_by { |i| i[:child] }
  end

  def load_milestone_map
    read_milestones_from_gitub

    newmilestonekeys = @milestonesfromtrac.keys - @milestonemap.keys

    newmilestonekeys.each do |milestonelabel|
      milestone           = {
          "title"       => "#{milestonelabel}",
          "state"       => @milestonesfromtrac[milestonelabel][:completed].nil? ? 'open' : 'closed',
          "description" => @milestonesfromtrac[milestonelabel][:description] || 'no description in trac',
          "due_on"      => "2012-10-09T23:39:01Z"
      }
      due                 = @milestonesfromtrac[milestonelabel][:due]
      milestone['due_on'] = Time.at(due / 1000000).strftime('%Y-%m-%dT%H:%M:%SZ') if due

      $logger.info "creating #{milestone}"
      response = JSON.parse(RestClient.post(
          "https://api.github.com/repos/#{@repo}/milestones",
          milestone.to_json,
          {"Authorization" => "token #{@token}",
           "Content-Type"  => "application/json",
           "Accept"        => "application/vnd.github.golden-comet-preview+json"}))
    end

    read_milestones_from_gitub

    $logger.info("Last created issue on GitHub is '#{@last_created_issue}'")
    nil
  end


  def map_user(user)
    @users[user] || user
  end

  def map_assignee(user)
    @users[user]
  end

  def migrate(start_ticket = -1, filterout_closed = false)
    start_ticket = start_ticket.to_i
    if start_ticket == -1
      start_ticket = @last_created_issue + 1
    end
    GracefulQuit.enable
    migrate_tickets(start_ticket, filterout_closed)
  end

  private

  def read_milestones_from_gitub
    milestonesongithub = JSON.parse(RestClient.get(
        "https://api.github.com/repos/#{@repo}/milestones?per_page=100",
        {"Authorization" => "token #{@token}",
         params:         {
             state:     "all",
             sort:      "due_on",
             direction: "desc",
         }}
    ))
    @milestonemap = Hash[milestonesongithub.map { |i| [i['title'], i['number'],] }]
    nil
  end

  # returns the author mail if found, otherwise author itself
  def trac_mail(author)
    return @trac_mails_cache[author] if @trac_mails_cache.has_key?(author)
    # tries to retrieve the email from trac db
    data = @trac.sessions.select(:value).where('name = "email" AND sid = ?', author)
    return (@trac_mails_cache[author] = data.first[:value]) if data.count == 1
    return (@trac_mails_cache[author] = author) # not found
  end

  # returns the git commit hash for a specified revision (using revmap hash)
  def map_changeset(str)
    if @revmap and @revmap.has_key?(str)
      return "[r#{str}](../commit/#{@revmap[str]}) #{@revmap[str]}"
    else
      return str
    end
  end

  def map_image(str)
    %Q{![#{str}](#{@attachurl}/#{@current_ticket_id}/#{str}) }
    #%Q{>>**insert-missing-image: (#{str}**)}
  end

  # Format time for github API
  def format_time(time)
    time = Time.at(time / 1e6, time % 1e6)
    return time.strftime("%FT%TZ")
  end

  # Creates github issues for trac tickets.
  def migrate_tickets(start_ticket, filterout_closed)
    $logger.info('migrating issues')
    # We match the issue title to determine whether an issue exists already.
    tractickets = @trac.tickets.order(:id).where { id >= start_ticket }.all
    begin
      lasttracid = tractickets.last[:id]
    rescue
      raise ("trac has no ticket #{start_ticket}")
    end


    (start_ticket.to_i .. lasttracid).each do |ticket_id|
      ticket = tractickets.select { |i| i[:id] == ticket_id }.first

      @current_ticket_id = ticket_id # used to build filename for attachments

      if ticket.nil?
        if @mockdeleted
          ticket = {
              id:       ticket_id,
              summary:  "DELETED in trac #{ticket_id}",
              time:     Time.now.to_i,
              status:   'closed',
              reporter: 'trac-hub'
          }
        else
          next
        end
      end

      raise ("tickets out of sync #{ticket_id} - #{ticket[:id]}") if ticket[:id] != ticket_id

      next if filterout_closed and ticket[:status] == "closed"
      GracefulQuit.check("quitting after processing ticket ##{@last_created_issue}")

      if @safetychecks;
        begin
          # issue exists already:
          issue = JSON.parse(RestClient.get(
              "https://api.github.com/repos/#{@repo}/issues/#{ticket[:id]}",
              {"Authorization" => "token #{@token}"}))
          $logger.info("found ticket #{ticket[:id]}")
          next
        rescue
        end
      end

      begin
        $logger.info(%Q{creating issue for trac #{ticket[:id]} "#{ticket[:summary]}" (#{ticket[:reporter]})})
        # API details: https://gist.github.com/jonmagic/5282384165e0f86ef105
        request  = compose_issue(ticket)
        response = JSON.parse(RestClient.post(
            "https://api.github.com/repos/#{@repo}/import/issues",
            request.to_json,
            {"Authorization" => "token #{@token}",
             "Content-Type"  => "application/json",
             "Accept"        => "application/vnd.github.golden-comet-preview+json"}))
      end


      if true #@safetychecks  - it is not really faster if we do not wait for the processing
        while response["status"] == "pending"
          sleep 1
          $logger.info("Checking import status: #{response['id']}")
          $logger.info("you can manually check: #{response['url']}")
          response = JSON.parse(RestClient.get(response['url'], {
              "Authorization" => "token #{@token}",
              "Accept"        => "application/vnd.github.golden-comet-preview+json"}))
        end
        $logger.info("Status: #{response['status']}")
        if response['status'] == 'failed'
          $logger.error(response['errors'])
          exit 1
        end

        issue_id = response["issue_url"].match(/\d+$/).to_s.to_i

        $logger.info("created issue ##{issue_id} for trac ticket #{ticket[:id]}")

        # assert correct issue number
        if issue_id != ticket[:id]
          $logger.warn("mismatch issue ##{issue_id} for ticket #{ticket[:id]}")
          exit 1
        end
      else
        # to allow manual verification:
        $logger.info(response['url'])
      end
      @last_created_issue = ticket[:id]
    end
  end

  def compose_issue(ticket)

    body   = ""
    closed = nil

    # summary line:
    if false
      body += [:id, :component, :priority, :resolution].map do |cat|
        ticket[cat] and not ticket[cat].to_s.lstrip.empty? and
            "**#{cat.to_s}:** #{ticket[cat]}"
      end.select { |x| x }.join(" | ")
    end

    # Initial report
    # TODO: respect ticket[:changetime]
    body += "\n\n" if not @singlepost
    body += ticket_change(@singlepost, {
        ticket:   ticket[:id],
        time:     ticket[:time],
        author:   ticket[:reporter],
        assigne:  ticket[:owner],
        field:    :initial,
        oldvalue: nil,
        newvalue: ticket[:description],

    })["body"]

    # combine the changes and attachment table results and sort them by date
    changes = @trac.changes.where(:ticket => ticket[:id]).collect.to_a
    changes += @trac.attachments.where(:type => 'ticket', :id => ticket[:id]).collect.to_a
    changes = changes.sort_by { |x| x[:time] }

    # replay all changes in chronological order:
    comments = changes.map { |x| ticket_change(@singlepost, x) }.select { |x| x }.to_a
    if @singlepost
      body     += comments.map { |x| x["body"] }.join("\n")
      comments = []
    end

    labels = Set[]
    changes.each do |x|
      del = @labels_cfg.fetch(x[:field], Hash[])[x[:oldvalue]]
      add = @labels_cfg.fetch(x[:field], Hash[])[x[:newvalue]]
      labels.delete(del) if del
#      labels.add(add) if add
      if x[:field] == "status" and x[:newvalue] == "closed"
        closed = x[:time]
      end
    end


    # we separate labels from badges
    # labels: are changed frequently in the lifecycle of a ticket, therefore are transferred to github lables
    # badges: are basically fixed  and are transferred to a metadata table in the ticket

    badges = Set[]

    badges.add(@labels_cfg.fetch('component', Hash[])[ticket[:component]])
    badges.add(@labels_cfg.fetch('type', Hash[])[ticket[:type]])
    badges.add(@labels_cfg.fetch('resolution', Hash[])[ticket[:resolution]])
    badges.add(@labels_cfg.fetch('version', Hash[])[ticket[:version]])

    labels.add(@labels_cfg.fetch('severity', Hash[])[ticket[:severity]])
    labels.add(@labels_cfg.fetch('priority', Hash[])[ticket[:priority]])
    labels.add(@labels_cfg.fetch('tracstate', Hash[])[ticket[:status]])
    labels.delete(nil)

    keywords = ticket[:keywords]
    if keywords
      if ticket[:keywords].downcase === "discuss"
        labels.add(@labels_cfg.fetch('keywords', Hash[])[ticket[:keywords].downcase])
      else
        badges.add(@labels_cfg.fetch('keywords', Hash[])[ticket[:keywords]])
      end
    end
    # If the field is not set, it will be nil and generate an unprocessable json

    milestone = @milestonemap[ticket[:milestone]]

    # compute footer
    footer = "Issue migrated from trac:#{ticket[:id]} at #{Time.now}"


    # compute badgetabe
    #

    github_assignee = map_assignee(ticket[:owner])

    badges     = badges.to_a.compact.sort
    badgetable = badges.map { |i| %Q{`#{i}`} }.join(" ")
    badgetable += "   |    by " + trac_mail(changes.first[:author]) rescue "deleted Ticket"
    #badgetable += "   |   **->#{ticket[:owner]}**"  # note that from github to gitlab we loose the assigne

    # compute subtickets

    parenttickets = @parenttickets[ticket[:id]]
    badgetable    += "\n\n**Parenttickets**: " + parenttickets.map { |i| "##{i[:parent]}" }.join(", ") if parenttickets

    subtickets = @subtickets[ticket[:id]]
    badgetable += "\n\n**Subtickets**: " + subtickets.map { |i| "##{i[:child]}" }.join(", ") if subtickets

    # compose body
    body = [badgetable, body, footer].join("\n\n___\n")

    labels.add("owner:#{github_assignee}")


    issue             = {
        "title"      => ticket[:summary],
        "body"       => body,
        "labels"     => labels.to_a,
        "closed"     => ticket[:status] == "closed",
        "created_at" => format_time(ticket[:time]),
        "milestone"  => milestone
    }

    ### as the assignee stuff is pretty fragile, we do not assign at all
    # issue['assignee'] = github_assignee if github_assignee

    if ticket[:changetime]
      # issue["updated_at"] = format_time(ticket[:changetime])
    end
    if issue["closed"] and closed
      #  issue["closed_at"] = format_time(closed)
    end

    return {
        "issue"    => issue,
        "comments" => comments,
    }
  end

  def ticket_change(append, meta)

    # kind
    if meta[:ticket]
      kind = meta[:field]
    else
      kind = 'attachment'
    end
    kind = 'title' if kind == 'summary'

    # time
    time = meta[:time]
    time = Time.at(time / 1e6, time % 1e6)

    # author
    author = meta[:author]
    author = trac_mail(author)
    if @users.has_key?(author)
      author = "@" + map_user(author)
    end

    text = ""

    unless kind === :initial
      text += "\n___\n" if false #append
      text += "#{author} "
    end

    case kind
    when 'owner', 'status', 'title', 'resolution', 'priority', 'component', 'type', 'severity', 'platform', 'milestone'
      old = meta[:oldvalue]
      new = meta[:newvalue]
      if old and new
        text += "changed #{kind} from `#{old}` to `#{new}`"
      elsif old
        text += "removed #{kind} (was `#{old}`)"
      elsif new
        text += "set #{kind} to `#{new}`"
      end

    when 'parents'
      old = meta[:oldvalue]
      new = meta[:newvalue]
      if old and new
        text += "changed #{kind} from `#{old}` to ##{new}"
      elsif old
        text += "removed #{kind} (was `#{old}`)"
      elsif new
        text += "set #{kind} to ##{new}"
      end

    when :initial
      body = meta[:newvalue]
      # text += "created the issue\n\n"
      if body and not body.lstrip.empty?
        #text += "\n___\n" if not append
        text += markdownify(body)
      end

    when 'comment'
      body      = meta[:newvalue]
      changeset = body.match(/In \[changeset\:\"(\d+)/).to_a[1]
      if changeset
        changesethash = @revmap[changeset]
        text          += "committed #{map_changeset(changeset)}"
      else
        text += "commented\n\n"
      end

      text += "\n___\n" if not append
      text += markdownify(body) if body
      return nil if body == nil or body.lstrip.empty?

    when 'attachment'
      text += "uploaded file "
      name = meta[:filename]
      body = meta[:description]
      if @attachurl
        url  = URI.escape("#{@attachurl}/#{meta[:id]}/#{name}")
        text += "[`#{name}`](#{url})"
        if [".png", ".jpg", ".gif"].include? File.extname(name).downcase
          body += "\n![#{name}](#{url})"
        end
      else
        text += "`#{name}`"
      end
      text += " (#{(meta[:size] / 1024.0).round(1)} KiB)"
      text += "\n\n" + body

    when 'description'
      # (ticket[:description] already contains the new value,
      # so there is no need to update)
      text += "edited the issue description"

    when 'keywords', 'cc', 'reporter', 'version'
      # don't care
      return nil

    else
      # this should not happen
      text += "changed #{kind} which not transferred by trac-hub"
    end

    return {
        "body"       => text,
        "created_at" => format_time(meta[:time]),
    }
  end

  def markdownify(str)
    # Line endings
    str.gsub!("\r\n", "\n")
    # CommitTicketReference
    str.gsub!(/\{\{\{\n(#!CommitTicketReference .+?)\}\}\}/m, '\1')
    str.gsub!(/#!CommitTicketReference .+\n/, '')
    # Code
    str.gsub!(/\{\{\{([^\n]+?)\}\}\}/, '`\1`')
    str.gsub!(/\{\{\{(.+?)\}\}\}/m, '```\1```')
    str.gsub!(/(?<=```)#!/m, '')
    # Headings
    str.gsub!(/\=\=\=\=\s(.+?)\s\=\=\=\=/, '#### \1')
    str.gsub!(/\=\=\=\s(.+?)\s\=\=\=/, '### \1')
    str.gsub!(/\=\=\s(.+?)\s\=\=/, '## \1')
    str.gsub!(/\=\s(.+?)\s\=/, '# \1')
    # Links
    str.gsub!(/\[(http[^\s\[\]]+)\s([^\[\]]+)\]/, '[\2](\1)')
    str.gsub!(/\!(([A-Z][a-z0-9]+){2,})/, '\1')
    # Font styles
    str.gsub!(/'''(.+?)'''/, '**\1**')
    str.gsub!(/''(.+?)''/, '*\1*')
    str.gsub!(/[^:]\/\/(.+?[^:])\/\//, '_\1_')
    # Lists
    str.gsub!(/(^\s+)\*/, '\1-')
    str.gsub!(/(^\s+)(\d)\./, '\1\2.')
    # Changeset
    str.gsub!(/https?:\/\/svnweb.cern.ch\/trac\/madx\/changeset\/(\d+)\/?/, '[changeset:\1]')
    str.gsub!(/\[changeset:"r(\d+)".*\]/, '[changeset:\1]')
    str.gsub!(/\[changeset:r(\d+)\]/, '[changeset:\1]')
    str.gsub!(/\br(\d+)\b/) { map_changeset(Regexp.last_match[1]) }
    str.gsub!(/\[changeset:"(\d+)".*\]/) { map_changeset(Regexp.last_match[1]) }
    str.gsub!(/\[changeset:"(\d+).*\]/) { map_changeset(Regexp.last_match[1]) }

    # image reference
    str.gsub!(/\[\[Image\(([^\)]+)\)\]\]/) { map_image(Regexp.last_match[1]) }

    # replace a full ticket id with the github short refrence
    if @tracticketbaseurl
      baseurlpattern = @tracticketbaseurl.gsub("/", "\\/")
      str.gsub!(/#{baseurlpattern}\/(\d+)/) { "ticket:#{Regexp.last_match[1]}  " }
    end

    # Ticket
    str.gsub!(/ticket:(\d+)/, '#\1')
    # set the body as a comment
    #str.gsub!("\n", "\n> ")
    #str = "> #{str}"
    return str
  end
end

class Trac
  attr_reader :tickets, :changes, :sessions, :attachments, :subtickets

  def initialize(db)
    $logger.info('loading tickets')
    @db          = db
    @tickets     = @db[:ticket]
    @subtickets  = @db[:subtickets]
    @changes     = @db[:ticket_change]
    @sessions    = @db[:session_attribute]
    @attachments = @db[:attachment]
  end


  # produce an shell script to be invoked
  # within the tracd container to export the attachmets
  def generate_attachment_exporter(cfg)
    outfile   = cfg.dig("attachments", "export_script")
    outfolder = cfg.dig("attachments", "export_folder")

    raise("mising attachements/export_script entry in configuration") unless outfile
    raise("mising attachements/export_folder entry in configuration") unless outfolder

    attachments   = @db['select id, filename from attachment where type="ticket"']
    exportcommads = attachments.map do |attachment|
      %Q{mkdir -p #{outfolder}/#{attachment[:id]}
      trac-admin /trac attachment export ticket:#{attachment[:id]} '#{attachment[:filename]}' > '#{outfolder}/#{attachment[:id]}/#{attachment[:filename]}'}
    end

    File.open(outfile, "w") do |f|
      f.puts ("mkdir -p #{outfolder}")
      f.puts (exportcommads.join("\n"))
    end

    $logger.info "created attachment exporter in #{outfile}"
  end

  def info

    users = [
        @db['select distinct reporter from ticket'].map { |r| r[:reporter] },
        @db['select distinct owner from ticket'].map { |r| r[:owner] },
        @db['select distinct author from ticket_change'].map { |r| r[:author] },
        @db["select distinct newvalue from ticket_change where field=\'reporter\'"].map { |r| r[:reporter] },
        @db['select distinct author   from revision'].map { |r| r[:author] },
        @db['select distinct author   from report'].map { |r| r[:author] },
        @db['select distinct author   from attachment'].map { |r| r[:author] }
    ].flatten.uniq.compact

    milestones  = @db['select name, name, due, completed, description  from milestone'].all.map { |i| [i[:name], i] }
    types       = @db['select distinct type        from ticket'].map { |r| r[:type] }.compact
    components  = @db['select distinct component   from ticket'].map { |r| r[:component] }.compact
    resolutions = @db['select distinct resolution  from ticket'].map { |r| r[:resolution] }.compact
    severity    = @db['select distinct severity    from ticket'].map { |r| r[:severity] }.compact
    priorities  = @db['select distinct priority    from ticket'].map { |r| r[:priority] }.compact
    tracstates  = @db['select distinct status      from ticket'].map { |r| r[:status] }.compact

    def _mkhash(prefix, array)
      Hash[array.map { |i| [i, "#{prefix}#{i}"] }]
    end

    result = {
        "users"      => _mkhash("", users),
        "milestones" => Hash[milestones],
        "labels"     => {
            "type"       => _mkhash("type_", types),
            "component"  => _mkhash("component_", components),
            "resolution" => _mkhash("resolution_", resolutions),
            "severity"   => _mkhash("severity", severity),
            "priority"   => _mkhash("priority_", priorities),
            "tracstate"  => _mkhash('tracstate_', tracstates)
        }
    }

    # here we use puts (not logger) as we redirect the ymal fo a file
    puts result.to_yaml
  end

end

class Options < Hash
  def initialize(argv)
    super()
    opts = OptionParser.new do |opts|
      opts.banner = "#{$0}, available options:"
      opts.on('-c config', '--config', 'set the configuration file') do |c|
        self[:config] = c
      end
      opts.on_tail('-h', '--help', 'display this help and exit') do |help|
        puts(opts)
        exit
      end
      opts.on('-s', '--start-at ID', 'start migration from ticket with number <ID>') do |id|
        self[:start] = id
      end
      opts.on('-r', '--rev-map-file FILE',
              'allows to specify a commit revision mapping FILE') do |file|
        self[:revmapfile] = file
      end
      opts.on('-a', '--attachment-url URL',
              'if attachment files are reachable via a URL we reference this here') do |url|
        self[:attachurl] = url
      end
      opts.on('-S', '--single-post',
              'Put all issue comments in the first message.') do |single|
        self[:singlepost] = single
      end
      opts.on('-F', '--fast-import',
              'Import without safety-checking issue numbers.') do |fast|
        self[:fast] = fast
      end
      opts.on('-M', '--mockup',
              'Import from 0 and mocking tickets deleted on trac') do |mockdeleted|
        self[:mockdeleted] = mockdeleted
      end

      opts.on('-A', '--attachment-exporter',
              'Generate an attachment exporter script according to config.yaml') do |attachmentexporter|
        self[:attachmentexporter] = attachmentexporter
      end

      opts.on('-o', '--opened-only', 'Skips the import of closed tickets') do |o|
        self[:openedonly] = o
      end
      opts.on('-v', '--verbose', 'verbose mode') do |v|
        self[:verbose] = v
      end
      opts.on('-i', '--info', 'Reports existing labels and users in the database') do |i|
        self[:info] = i
      end
      begin
        opts.parse!(argv)
        if not self[:config]
          configfiles = ['../trac-hub.config.yaml', 'trac-hub.config.yaml']
          default = configfiles.map do |f|
            File.join(File.dirname(__FILE__), f)
          end.select{|f|File.exists?(f)}.first
          raise "missing configuration file (one of #{configfiles})" unless default
          self[:config] = default
        end
        self[:start] = -1 unless self[:start]
      rescue => e
        STDERR.puts(e)
        STDERR.puts('run with -h to see available options')
        exit 1
      end
    end
  end
end

if __FILE__ == $0
  opts = Options.new(ARGV)
  cfg  = YAML.load_file(opts[:config])

  # Setup logger.
  $logger           = Logger.new(STDERR)
  $logger.level     = opts[:verbose] ? Logger::DEBUG : Logger::INFO
  $logger.formatter = proc do |severity, datetime, progname, msg|
    time = datetime.strftime('%Y-%m-%d %H:%M:%S')
    "[#{time}] #{severity}#{' ' * (5 - severity.size + 1)}| #{msg}\n"
  end

  # Setup database.
  db = nil
  if db_url = cfg['trac']['database']
    db = Sequel.connect(db_url)
  end
  if not db
    $logger.error('could not connect to trac databse')
    exit 1
  end

  # load revision mapping file and convert it to a hash.
  # This revmap file allows to map between SVN revisions (rXXXX)
  # and git commit sha1 hashes.
  revmap     = nil
  revmapfile = opts[:revmapfile] || cfg['revmapfile']
  if revmapfile
    File.open(revmapfile, "r:UTF-8") do |f|
      $logger.info("loading revision map #{revmapfile}")
      revmap = Hash[f.each_line
                        .map { |line| line.split(/\s+\|\s+/) }
                        .map { |rev, sha| [rev.gsub(/^r/, ''), sha] } # remove leading "r" if present
      ]
    end
  end

  trac = Trac.new(db)

  if opts[:info]
    trac.info
    exit(0)
  end

  if opts[:attachmentexporter]
    begin
      trac.generate_attachment_exporter(cfg)
    rescue StandardError => e
      $logger.error(e.message)
      exit(1)
    end
    exit(0)
  end

  #            trac: trac, opts: opts, cfg: cfg, revmap: revmap

  # migrator = Migrator.new(
  #     trac, cfg['github'], cfg['users'], cfg['labels'], revmap,
  #     opts[:attachurl], opts[:singlepost], (not opts[:fast]), opts[:mockdeleted])

  migrator = Migrator.new(trac: trac, opts: opts, cfg: cfg, revmap: revmap)
  migrator.migrate(opts[:start], opts[:openedonly])
end
